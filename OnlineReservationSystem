import java.util.ArrayList;
import java.util.Scanner;

class Reservation {
    private String passengerName;
    private String trainNumber;
    private String classType;
    private String dateOfJourney;
    private String from;
    private String to;

    public Reservation(String passengerName, String trainNumber, String classType, String dateOfJourney, String from, String to) {
        this.passengerName = passengerName;
        this.trainNumber = trainNumber;
        this.classType = classType;
        this.dateOfJourney = dateOfJourney;
        this.from = from;
        this.to = to;
    }

    public String getPassengerName() {
        return passengerName;
    }

    public String getTrainNumber() {
        return trainNumber;
    }

    public String getClassType() {
        return classType;
    }

    public String getDateOfJourney() {
        return dateOfJourney;
    }

    public String getFrom() {
        return from;
    }

    public String getTo() {
        return to;
    }

    @Override
    public String toString() {
        return "Passenger: " + passengerName + ", Train: " + trainNumber +
               ", Class: " + classType + ", Date: " + dateOfJourney +
               ", From: " + from + ", To: " + to;
    }
}

public class OnlineReservationSystem {
    private static ArrayList<Reservation> reservations = new ArrayList<>();
    private static int pnrCounter = 1000;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        while (true) {
            System.out.println("\nOnline Reservation System");
            System.out.println("1. Book a Reservation");
            System.out.println("2. Cancel a Reservation");
            System.out.println("3. Exit");
            System.out.print("Select an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume the newline character

            switch (choice) {
                case 1:
                    bookReservation(scanner);
                    break;
                case 2:
                    cancelReservation(scanner);
                    break;
                case 3:
                    System.out.println("Exiting the system. Goodbye!");
                    System.exit(0);
                default:
                    System.out.println("Invalid option. Please try again.");
            }
        }
    }

    private static void bookReservation(Scanner scanner) {
        System.out.println("\nBook a Reservation");
        System.out.print("Enter passenger name: ");
        String passengerName = scanner.nextLine();
        System.out.print("Enter train number: ");
        String trainNumber = scanner.nextLine();
        System.out.print("Enter class type: ");
        String classType = scanner.nextLine();
        System.out.print("Enter date of journey: ");
        String dateOfJourney = scanner.nextLine();
        System.out.print("Enter from (place): ");
        String from = scanner.nextLine();
        System.out.print("Enter to destination: ");
        String to = scanner.nextLine();

        Reservation reservation = new Reservation(passengerName, trainNumber, classType, dateOfJourney, from, to);
        reservations.add(reservation);

        int pnr = pnrCounter++;
        System.out.println("Reservation successful! Your PNR number is: " + pnr);
    }

    private static void cancelReservation(Scanner scanner) {
        System.out.println("\nCancel a Reservation");
        System.out.print("Enter PNR number: ");
        int pnrToCancel = scanner.nextInt();
        scanner.nextLine(); // Consume the newline character

        boolean found = false;
        for (Reservation reservation : reservations) {
            if (reservation.getPassengerName().equalsIgnoreCase(String.valueOf(pnrToCancel))) {
                System.out.println("Reservation found:\n" + reservation);
                System.out.print("Confirm cancellation (yes/no): ");
                String confirm = scanner.nextLine();
                if (confirm.equalsIgnoreCase("yes")) {
                    reservations.remove(reservation);
                    System.out.println("Reservation canceled successfully.");
                } else {
                    System.out.println("Reservation not canceled.");
                }
                found = true;
                break;
            }
        }

        if (!found) {
            System.out.println("Reservation with PNR number " + pnrToCancel + " not found.");
        }
    }
}
